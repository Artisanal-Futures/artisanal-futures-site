model UpcycleResult {
  id                        String            @id @default(cuid())
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  projectTitle              String?
  prompt                    String
  negativePrompt            String?
  refinementObject          String
  refinementType            RefinementType
  styleImageUrl             String?
  structureImageUrl         String?
  zipFileUrl                String?
  outputImageUrl            String?
  improvePrompt             Boolean?
  removeBackgroundScrap     Boolean?
  removeBackgroundStructure Boolean?
  removeBackgroundGenerated Boolean?
  trackingId                String?           @unique
  userId                    String
  upcycleType               UpcycleType       @default(GENERATE)
  generationModelName       String?
  styleModelName            String?
  structureSettings         Json?
  styleSettings             Json?
  trainingSettings          Json?
  trainingModelName         String?
  error                     String?
  startedAt                 DateTime?
  status                    status            @default(QUEUED)
  questions                 UpcycleQuestion[]
  rating                    UpcycleRating?
  user                      User              @relation(fields: [userId], references: [id])
}

model UpcycleQuestion {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  question        String
  llmResponse     String
  upcycleResultId String
  upcycleResult   UpcycleResult @relation(fields: [upcycleResultId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  title        String
  message      String
  resourceId   String
  resourceType ResourceType @default(GENERIC)
  read         Boolean      @default(false)
  userId       String
  user         User         @relation(fields: [userId], references: [id])
}

model UpcycleRating {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  rating          UpcycleThumb  @default(NEUTRAL)
  upcycleResultId String        @unique
  reasoning       String?
  upcycleResult   UpcycleResult @relation(fields: [upcycleResultId], references: [id], onDelete: Cascade)
}

enum RefinementType {
  ITEM
  STYLE
}

enum ResourceType {
  UPCYCLE_RESULT
  GENERIC
}

enum UpcycleType {
  GENERATE
  GENERATE_FROM_STRUCTURE
  TRAIN_AND_GENERATE
  GENERATE_ON_PRE_TRAINED
  TRAIN_ONLY
}

enum UpcycleThumb {
  UP
  DOWN
  NEUTRAL
}
