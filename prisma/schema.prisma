// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  ADMIN
  ARTISAN
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  role          Role         @default(USER)
  depots        Depot[]
}

enum RouteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String   @id @default(cuid())
  processes       String?
  materials       String?
  principles      String?
  description     String?
  unmoderatedForm Boolean  @default(false)
  moderatedForm   Boolean  @default(false)
  hiddenForm      Boolean  @default(false)
  privateForm     Boolean  @default(false)
  supplyChain     Boolean  @default(false)
  messagingOptIn  Boolean  @default(false)
  ownerId         String
  shopId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Shop {
  id          String   @id @default(cuid())
  shopName    String
  ownerName   String
  bio         String?   @db.LongText
  description String?
  ownerPhoto  String?
  logoPhoto   String?
  coverPhoto  String?
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  email       String?
  website     String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
  contentHtml String       @db.Text
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  @@index([authorId])
  @@index([hidden, createdAt(sort: Desc)])
  @@fulltext([title, content])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([postId])
}



// Solidarity Pathways

model Depot {
  id              Int   @id @default(autoincrement())
  ownerId         String @unique //One owner can have one depot
  name            String? //Name of the depot
  depotAddressId  String? //Main Address of the depot

  addresses       Address[] //All addresses associated with the depot
  drivers         Driver[] //All drivers associated with the depot
  vehicles        Vehicle[] //All vehicles associated with the depot
  clients         Client[] //All clients associated with the depot
  jobs            Job[] //All jobs associated with the depot
  users           User[] //All users associated with the depot
  routes          Route[] //All routes associated with the depot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id              String   @id @default(cuid())
  formatted       String  //This this the full address
  street          String?
  additional      String?
  city            String?
  state           String?
  postal_code     String?
  country         String?
  latitude        Float
  longitude       Float

  depotId         Int
  depot           Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)

  drivers         Driver[]  @relation("AddressToDriver")
  vehicles        Vehicle[] @relation("StartAddressToVehicle")
  endVehicles     Vehicle[] @relation("EndAddressToVehicle")
  clients         Client[] 
  jobs            Job[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([depotId])
}

model Schedule {
  id    Int     @id @default(autoincrement())
  day   WeekDay
  start String
  end   String
  driverId String
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId])
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DriverType {
  FULL_TIME
  PART_TIME
  TEMP
  VOLUNTEER
}

enum JobType {
  PICKUP
  DELIVERY
  PICKUP_AND_DELIVERY
  SERVICE
  ADMIN
  OTHER
}

model Driver {
  id                String      @id @default(cuid())
  type              DriverType  @default(FULL_TIME)
  depotId           Int
  depot             Depot       @relation(fields: [depotId], references: [id], onDelete: Cascade)
  name              String
  addressId         String?     //Driver's home or default address
  address           Address?    @relation("AddressToDriver", fields: [addressId], references: [id])
  phone             String
  email             String
  schedule          Schedule[]
  defaultVehicleId  String?
  vehicles          Vehicle[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([addressId])
  @@index([depotId])
}

model Vehicle {
  id                String              @id @default(cuid())
  depotId           Int
  depot             Depot               @relation(fields: [depotId], references: [id], onDelete: Cascade)
  driverId          String?
  driver            Driver?             @relation(fields: [driverId], references: [id])
  type              String
  startAddressId    String              //Starting address of the vehicle. Can default to depot address or driver's address.
  startAddress      Address             @relation("StartAddressToVehicle", fields: [startAddressId], references: [id])
  endAddressId      String?             //Optional, leave blank if roundtrip
  endAddress        Address?            @relation("EndAddressToVehicle", fields: [endAddressId], references: [id])
  shiftStart        Int                 //Start of shift in unix time
  shiftEnd          Int                 //Start of shift in unix time
  capacity          Int?                //Optional: Capacity of the vehicle (i.e. max number of units it can carry )
  maxTasks          Int?                //Optional: Max number of tasks the vehicle can do in one shift
  maxTravelTime     Int?                //Optional: Max travel time in seconds
  maxDistance       Int?                //Optional: Max distance in meters
  breaks            Break[]
  notes             String?             //Optional: Any additional notes about the vehicle
  cargo             String?             //Optional: Any specific nots on its cargo, contents, etc.
  routeId           String?
  route             Route?              @relation(fields: [routeId], references: [id])
  optimizedRouteId  String?
  optimizedRoute    OptimizedRoutePath? @relation(fields: [optimizedRouteId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([endAddressId])
  @@index([startAddressId])
  @@index([driverId])
  @@index([routeId])
  @@index([optimizedRouteId])
  @@index([depotId])
}

model Break {
  id             Int      @id @default(autoincrement())
  start          Int?     //Optional: Start of break in unix time
  end            Int?     //Optional: End of break in unix time
  duration       Int
  vehicleId      String
  vehicle        Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
}

model Client {
  id            String    @id @default(cuid())
  depotId       Int
  depot         Depot     @relation(fields: [depotId], references: [id], onDelete: Cascade)
  name          String
  addressId     String?   //Optional: Main address of the client
  address       Address?  @relation(fields: [addressId], references: [id])
  phone         String?
  email         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  defaultJobId  String?   //Optional: Default job for the client. Like a go-to order or something
  jobs          Job[]

  @@index([addressId])
  @@index([depotId])
}

model Job {
  id              String    @id @default(cuid())
  type            JobType
  depotId         Int
  depot           Depot     @relation(fields: [depotId], references: [id], onDelete: Cascade)
  addressId       String?
  address         Address?  @relation(fields: [addressId], references: [id])
  clientId        String?
  client          Client?   @relation(fields: [clientId], references: [id])
  prepTime        Int       //Preparation time in seconds
  serviceTime     Int       //Service time in seconds
  priority        Int       //Priority of the job (1-100)
  timeWindowStart Int
  timeWindowEnd   Int
  routeId         String?
  route           Route? @relation(fields: [routeId], references: [id])
  notes           String?
  order           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([addressId])
  @@index([clientId])
  @@index([routeId])
  @@index([depotId])
}

model Route {
  id              String   @id @default(cuid())
  depotId         Int
  depot           Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)
  // name            String
  jobs            Job[]
  vehicles        Vehicle[]
  optimizedRoute  OptimizedRoutePath[]
  deliveryAt      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([depotId])
}

model OptimizedRoutePath {
  id            String   @id @default(cuid())
  routeId       String
  route         Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  vehicle       Vehicle[]
  stops         OptimizedStop[]
  geoJson       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([routeId])
}

model OptimizedStop {
  id              String              @id @default(cuid())
  routePathId     String
  routePath       OptimizedRoutePath  @relation(fields: [routePathId], references: [id], onDelete: Cascade)
  arrival         Int
  departure       Int
  duration        Int
  prep            Int
  type            String
  notes           String?
  order           String?
  status          RouteStatus
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([routePathId])
}