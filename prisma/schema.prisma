// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = [ "fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  ADMIN
  ARTISAN
}
datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  role          Role         @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String   @id @default(cuid())
  processes       String?
  materials       String?
  principles      String?
  description     String?
  unmoderatedForm Boolean  @default(false)
  moderatedForm   Boolean  @default(false)
  hiddenForm      Boolean  @default(false)
  privateForm     Boolean  @default(false)
  supplyChain     Boolean  @default(false)
  messagingOptIn  Boolean  @default(false)
  ownerId         String
  shopId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Shop {
  id          String   @id @default(cuid())
  shopName    String
  ownerName   String
  bio         String?
  description String?
  ownerPhoto  String?
  logoPhoto   String?
  coverPhoto  String?
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  email       String?
  website     String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
  contentHtml String       @db.Text
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  @@index([authorId])
  @@index([hidden, createdAt(sort: Desc)])
  @@fulltext([title, content])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([postId])
}
