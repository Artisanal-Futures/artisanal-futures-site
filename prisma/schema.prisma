// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  ADMIN
  ARTISAN
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  role          Role         @default(USER)
  depots        Depot[]
}

enum RouteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String   @id @default(cuid())
  processes       String?
  materials       String?
  principles      String?
  description     String?
  unmoderatedForm Boolean  @default(false)
  moderatedForm   Boolean  @default(false)
  hiddenForm      Boolean  @default(false)
  privateForm     Boolean  @default(false)
  supplyChain     Boolean  @default(false)
  messagingOptIn  Boolean  @default(false)
  ownerId         String
  shopId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Shop {
  id          String   @id @default(cuid())
  shopName    String
  ownerName   String
  bio         String?   @db.LongText
  description String?
  ownerPhoto  String?
  logoPhoto   String?
  coverPhoto  String?
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  email       String?
  website     String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
  contentHtml String       @db.Text
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  @@index([authorId])
  @@index([hidden, createdAt(sort: Desc)])
  @@fulltext([title, content])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([postId])
}

// model Depot {
//   id        String   @id @default(cuid())
//   ownerId   String
//   name      String
//   address   String
//   latitude  Float
//   longitude Float
//   drivers   Driver[]
//   users     User[]
// }



// Solidarity Pathways

model Depot {
  id        Int   @id @default(autoincrement())
  ownerId   String @unique
  name      String
  slug      String?
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  drivers   Driver[]
  vehicles  Vehicle[]
  clients   Client[]
  jobs      Job[]
  users     User[]
 
  routes    Route[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([addressId])

}

model Address {
  id              Int   @id @default(autoincrement())
  street          String
  additional      String?
  city            String
  state           String
  postal_code     String
  country         String
  latitude        Float
  longitude       Float
  // startLocations  RouteDetails[] @relation("StartAddressToRouteDetails")
  // endLocations    RouteDetails[] @relation("EndAddressToRouteDetails")

  depot           Depot[]
  
  drivers         Driver[] @relation("AddressToDriver")
  startVehicles   Vehicle[] @relation("StartAddressToVehicle")
  endVehicles     Vehicle[] @relation("EndAddressToVehicle")
  clients         Client[] 
  jobs           Job[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Schedule {
  id    Int     @id @default(autoincrement())
  day   WeekDay
  start String
  end   String
  driverId Int
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId])
}

enum WeekDay{
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// model RouteDetails{
//   id              Int    @id @default(autoincrement())
//   startLocationId Int?
//   endLocationId   Int?
//   startLocation   Address?   @relation("StartAddressToRouteDetails", fields: [startLocationId], references: [id])
//   endLocation     Address?   @relation("EndAddressToRouteDetails", fields: [endLocationId], references: [id])
//   numberOfStops   Int
//   routeLength     Float
//   unitMeasurement String?

//   @@index([startLocationId])
//   @@index([endLocationId])
// }

model Driver {
  id                Int         @id @default(autoincrement())
  depotId           Int
  depot             Depot       @relation(fields: [depotId], references: [id], onDelete: Cascade)
  name              String
  addressId         Int?
  address           Address?    @relation("AddressToDriver", fields: [addressId], references: [id])
  phone             String
  email             String

  schedule          Schedule[]

  // assignments       VehicleDriverAssignment[]

  defaultVehicleId  Int?
  vehicles          Vehicle[]
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([addressId])
  @@index([depotId])
}


model Vehicle {
  id            Int @id @default(autoincrement())
  depotId       Int
  depot         Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)

  driverId      Int?
  driver        Driver?   @relation(fields: [driverId], references: [id])

  type           String
  startAddressId Int
  endAddressId   Int?
  startAddress   Address   @relation("StartAddressToVehicle", fields: [startAddressId], references: [id])
  endAddress     Address?  @relation("EndAddressToVehicle", fields: [endAddressId], references: [id])

  shiftStart Int
  shiftEnd   Int

  capacity Int?
  maxTasks Int?
  maxTravelTime Int?
  maxDistance Int?

  breaks      Break[]

  notes      String?
  cargo      String?

  routeId Int
  route                 Route @relation(fields: [routeId], references: [id])
  

  optimizedRouteId Int
  optimizedRoute   OptimizedRoutePath @relation(fields: [optimizedRouteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([endAddressId])
  @@index([startAddressId])
  @@index([driverId])
  @@index([routeId])
  @@index([optimizedRouteId])
  @@index([depotId])
}


model Break {
  id             Int         @id @default(autoincrement())
  start          Int?
  end            Int?
  duration       Int
  vehicleId      Int
  vehicle        Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
 

  @@index([vehicleId])


}


model Client {
  id            Int @id @default(autoincrement())
   depotId       Int
  depot         Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)


  name          String
  addressId     Int?
  address       Address?   @relation(fields: [addressId], references: [id])
  phone         String?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  jobs          Job[]
  // assignments   JobClientAssignment[]

  @@index([addressId])
  @@index([depotId])
}

model Job {
  id            Int @id @default(autoincrement())

 depotId       Int
  depot         Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)


  type          String
  addressId     Int?
  address       Address?   @relation(fields: [addressId], references: [id])
  clientId      Int?
  client        Client?   @relation(fields: [clientId], references: [id])

  prepTime      Int
  serviceTime   Int
  priority      Int

  timeWindowStart Int
  timeWindowEnd   Int

  pendingRouteID Int
  pendingRoute    Route @relation(fields: [pendingRouteID], references: [id])



  notes         String?
  order         String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([addressId])
  @@index([clientId])
  @@index([pendingRouteID])
  @@index([depotId])
}


// model JobClientAssignment {
//   id            Int @id @default(autoincrement())
//   jobId        Int
//   job           Job   @relation(fields: [jobId], references: [id])
//   clientId      Int
//   client        Client   @relation(fields: [clientId], references: [id])

//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   @@index([jobId])
//   @@index([clientId])
// }

// model VehicleDriverAssignment {
//   id            Int @id @default(autoincrement())
//   vehicleId     Int
//   vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
//   driverId      Int
//   driver        Driver   @relation(fields: [driverId], references: [id])

//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   @@index([vehicleId])
//   @@index([driverId])
// }
model Route {
  id            Int @id @default(autoincrement())
   depotId       Int
  depot         Depot @relation(fields: [depotId], references: [id], onDelete: Cascade)

  name          String
  jobs          Job[]
  vehicles      Vehicle[]

  optimizedRoute OptimizedRoutePath[]

  deliveryAt    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([depotId])
}

model OptimizedRoutePath {
    id            Int @id @default(autoincrement())
    routeId       Int
    route         Route   @relation(fields: [routeId], references: [id], onDelete: Cascade)
    vehicle      Vehicle[]
    // vehicleId       Int
    // vehicle         Vehicle   @relation(fields: [vehicleId], references: [id])

    geoJson       Json
    stops OptimizedStop[]

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([routeId])
}

model OptimizedStop {
  id            Int @id @default(autoincrement())
  routePathId  Int
  routePath    OptimizedRoutePath   @relation(fields: [routePathId], references: [id], onDelete: Cascade)
  arrival Int
  departure Int
  duration Int
  prep Int
  type String
  details String?
  status RouteStatus
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([routePathId])
}