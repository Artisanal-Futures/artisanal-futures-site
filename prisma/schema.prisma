// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  ADMIN
  ARTISAN
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  role          Role         @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id              String   @id @default(cuid())
  processes       String?
  materials       String?
  principles      String?
  description     String?
  unmoderatedForm Boolean  @default(false)
  moderatedForm   Boolean  @default(false)
  hiddenForm      Boolean  @default(false)
  privateForm     Boolean  @default(false)
  supplyChain     Boolean  @default(false)
  messagingOptIn  Boolean  @default(false)
  ownerId         String
  shopId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Shop {
  id          String   @id @default(cuid())
  shopName    String
  ownerName   String
  bio         String?
  description String?
  ownerPhoto  String?
  logoPhoto   String?
  coverPhoto  String?
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  email       String?
  website     String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
  contentHtml String       @db.Text
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  @@index([authorId])
  @@index([hidden, createdAt(sort: Desc)])
  @@fulltext([title, content])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([postId])
}

model RouteDepot {
  id        String     @id @default(cuid())
  ownerId   String
  name      String
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  lat       Float?
  lng       Float?
  drivers   Driver[]   @relation("DepotToDriver")
  stops     Stop[]
  routes    Route[]
  customers Customer[] @relation("CustomerToDepot")
}

model Driver {
  id            String      @id @default(cuid())
  routeDepotId  String
  routeDepot    RouteDepot  @relation("DepotToDriver", fields: [routeDepotId], references: [id])
  name          String
  phone         String?
  email         String?
  route         Route?      @relation(fields: [routeId], references: [id])
  routeId       String?
  routeData      DriverRouteInfo[]
}

model TimeWindow {
  id    String   @id @default(cuid())
  start DateTime
  end   DateTime

  Driver DriverRouteInfo[]
  stop   Stop?    @relation(fields: [stopId], references: [id])
  stopId String?
}

model BreakTimeWindow {
  id      String   @id @default(cuid())
  start   DateTime
  end     DateTime
  break   Break?   @relation(fields: [breakId], references: [id])
  breakId String?
}

model Break {
  id          String            @id @default(cuid())
  timeWindows BreakTimeWindow[]
  duration    Int?
  driverData      DriverRouteInfo?           @relation(fields: [driverDataId], references: [id])
  driverDataId    String?
}

model Customer {
  id           String     @id @default(cuid())
  routeDepotId String
  routeDepot   RouteDepot @relation("CustomerToDepot", fields: [routeDepotId], references: [id])
  name         String
  phone        String?
  email        String?
  address      String?
  city         String?
  state        String?
  zip          String?
  country      String?
  lat          Float?
  lng          Float?
  stop         Stop[]
}

model Stop {
  id               String       @id @default(cuid())
  routeDepotId     String
  routeDepot       RouteDepot   @relation(fields: [routeDepotId], references: [id], onDelete: Cascade)
  customerId       String
  customer         Customer     @relation(fields: [customerId], references: [id])
  timeWindows      TimeWindow[]
  dropOffDuration  Int?
  prepTimeDuration Int?
  priority         Int?
  description      String?
  route            Route?       @relation(fields: [routeId], references: [id])
  routeId          String?
}

model OptimizedRoute {
  id       String   @id @default(cuid())
  fileName String
  date     DateTime
  routeId  String   @unique
  route    Route    @relation(fields: [routeId], references: [id])
}

model Route {
  id               String          @id @default(cuid())
  routeDepotId     String
  routeDepot       RouteDepot      @relation(fields: [routeDepotId], references: [id], onDelete: Cascade)
  date             DateTime
  stops            Stop[]
  drivers          Driver[]
  optimizedRoute   OptimizedRoute? 
  optimizedRouteId String?
}


model DriverRouteInfo{
  id           String   @id @default(cuid())
  driverId     String
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)

  address       String?
  city          String?
  state         String?
  zip           String?
  country       String?
  lat           Float?
  lng           Float?
  maxStops      Int?
  maxTravelTime Int?
  breaks        Break[]
  timeWindowId  String?
  timeWindow    TimeWindow? @relation(fields: [timeWindowId], references: [id])
  routeId   String?
  date      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([driverId])
}

