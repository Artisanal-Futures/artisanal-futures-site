import dynamic from "next/dynamic";
import Head from "next/head";

import { useEffect } from "react";
import LoadingIndicator from "~/components/tools/routing/solutions/loading-indicator";
import { MinimalRouteCard } from "~/components/tools/routing/solutions/minimal-route-card";

import type { ExpandedRouteData } from "~/components/tools/routing/types";
import { Badge } from "~/components/ui/badge";
import { Button } from "~/components/ui/button";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import PageLoader from "~/components/ui/page-loader";
import { ScrollArea } from "~/components/ui/scroll-area";

import { useDepot } from "~/hooks/routing/use-depot";
import useRealTime from "~/hooks/routing/use-realtime";
import RouteLayout from "~/layouts/route-layout";
import { fetchAllRoutes } from "~/utils/routing/supabase-utils";
import { cn } from "~/utils/styles";

const LazyTrackingMap = dynamic(
  () => import("~/components/tools/routing/map/tracking-map"),
  {
    ssr: false,
    loading: () => <div>loading...</div>,
  }
);

const TrackingPage = () => {
  const { selectedRoute, routes, setRoutes, setSelectedRoute } = useDepot(
    (state) => state
  );

  const { activeUsers, messages } = useRealTime();

  const checkIfOnline = (idx: number) => {
    if (activeUsers.length > 0) {
      const user = activeUsers.find((user) => user.route.vehicle === idx);
      if (user) return true;
    }
    return false;
  };

  useEffect(() => {
    fetchAllRoutes(setRoutes);
  }, [setRoutes]);

  return (
    <>
      <Head>
        <title>Dispatch Tracking | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />{" "}
      </Head>
      <RouteLayout>
        <section className="flex flex-1  flex-col-reverse border-2 lg:flex-row">
          <section className="flex w-full flex-col gap-4 max-lg:h-4/6 lg:w-5/12 xl:w-3/12">
            <div className="p-4 ">
              <h2 className="text-3xl font-bold tracking-tight">
                Dispatch Tracking
              </h2>
              <p>Track your current drivers and manage your routes</p>
            </div>
            <ScrollArea className={cn(" h-3/5 w-full  rounded-md border p-4 ")}>
              {" "}
              {(!routes || routes.length == 0) && (
                <div className="">
                  {" "}
                  <div className=" flex p-5 ">
                    <LoadingIndicator />{" "}
                    <p className="font-semibold"> Fetching routes...</p>
                  </div>
                </div>
              )}
              {routes &&
                routes.length > 0 &&
                routes.map((route: ExpandedRouteData, idx: number) => {
                  const steps = messages?.filter(
                    (message) => message.routeId === route?.routeId
                  );

                  return (
                    <Button
                      onClick={() => setSelectedRoute(route)}
                      variant={"ghost"}
                      key={idx}
                      className="  my-2 ml-auto  flex h-auto  w-full p-0 text-left"
                    >
                      <MinimalRouteCard
                        data={route}
                        className="w-full"
                        isOnline={checkIfOnline(route.vehicle)}
                        isTracking={true}
                        textColor={route?.vehicle}
                        messages={steps}
                      />
                    </Button>
                  );
                })}{" "}
            </ScrollArea>
            <ScrollArea className="h-2/5 w-full flex-1 rounded-md border p-4">
              <h3 className="text-lg font-medium">
                Incoming Messages from Drivers
              </h3>

              {messages.length == 0 && (
                <div className="">
                  {" "}
                  <div className=" flex py-5 ">
                    <p className="font-normal">
                      No messages have been sent this session
                    </p>
                  </div>
                </div>
              )}

              {messages &&
                messages.length > 0 &&
                messages.map((message, idx) => {
                  return (
                    <Card key={idx}>
                      <CardHeader className="pb-3">
                        <CardTitle className="flex items-center justify-between gap-4">
                          {message.name}

                          <Badge>{message.status}</Badge>
                        </CardTitle>
                        <CardDescription>{message.address}</CardDescription>
                      </CardHeader>
                      <CardContent className="grid gap-1">
                        <div className="-mx-2 flex items-start space-x-4 rounded-md p-2 transition-all hover:bg-accent hover:text-accent-foreground">
                          <div className="space-y-1">
                            <p className="text-sm font-medium leading-none">
                              Message
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {message.deliveryNotes} {message?.routeId}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
            </ScrollArea>

            {/* <Button>Adjust Routes</Button> */}

            {/* {selected && (
                    <StopDetails
                      open={open}
                      setOpen={setOpen}
                      routeData={selected}
                    />
                  )} */}
          </section>
          <section className="z-0 flex w-full flex-col  max-lg:grow lg:w-7/12 xl:w-9/12">
            <LazyTrackingMap
              activeUsers={activeUsers}
              currentRoutes={routes}
              selectedRoute={selectedRoute}
            />
          </section>
        </section>
      </RouteLayout>
    </>
  );
};

export default TrackingPage;
