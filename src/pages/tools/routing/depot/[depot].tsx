import { format } from "date-fns";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useState } from "react";
import DriversTab, {
  DriversDynamicTab,
} from "~/components/tools/routing/drivers/drivers-tab";
import CalculationsTab, {
  CalculationsDynamicTab,
} from "~/components/tools/routing/solutions/calculations_tab";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";

import StopsTab, {
  StopsDynamicTab,
} from "~/components/tools/routing/stops/stops_tab";
import RouteLayout from "~/layouts/route-layout";

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "~/components/ui/popover";

import { HamburgerMenuIcon } from "@radix-ui/react-icons";
import { ArrowRight, CalendarIcon, ChevronRight, PlusIcon } from "lucide-react";

import { Button } from "~/components/ui/button";
import { Calendar } from "~/components/ui/calendar";
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "~/components/ui/command";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "~/components/ui/map-sheet";

import { useDrivers } from "~/hooks/routing/use-drivers";
import useRouteOptimization from "~/hooks/routing/use-route-optimization";
import { useStops } from "~/hooks/routing/use-stops";

import { GetServerSidePropsContext } from "next";
import { useParams } from "next/navigation";
import DriverSheet from "~/components/tools/routing/drivers/driver_sheet";
import NewDriverSheet from "~/components/tools/routing/drivers/new-driver-sheet";
import FulfillmentSheet from "~/components/tools/routing/stops/fulfillment-sheet";
import TabOptions from "~/components/tools/routing/ui/tab_options";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";
import { cn } from "~/utils/styles";
const LazyRoutingMap = dynamic(
  () => import("~/components/tools/routing/map/routing-map"),
  {
    ssr: false,
    loading: () => <div>loading...</div>,
  }
);
/**
 * Page component that allows users to generate routes based on their input.
 */
const RoutingPage = () => {
  const { locations, activeLocation } = useStops((state) => state);
  const { drivers, activeDriver } = useDrivers((state) => state);

  const { getRoutes } = useRouteOptimization();
  const [tabValue, setTabValue] = useState("plan");

  const params = useParams();
  const { data: databaseDrivers } = api.drivers.getOwnedDrivers.useQuery({
    depotId: (params?.depot as string) ?? null,
  });

  return (
    <>
      <Head>
        <title>Routing Optimization | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />{" "}
      </Head>

      <FulfillmentSheet stop={activeLocation} />
      <DriverSheet driver={activeDriver} />

      <RouteLayout>
        <section className=" flex flex-1 flex-col-reverse border-2 bg-orange-500 sm:bg-yellow-500 md:flex-row md:bg-green-500 lg:bg-purple-500 xl:bg-blue-500 2xl:bg-red-500">
          <Tabs
            defaultValue="plan"
            value={tabValue}
            onValueChange={setTabValue}
            className="flex flex-col gap-4 md:w-6/12 lg:w-5/12 2xl:w-3/12 "
          >
            <TabsList className=" flex ">
              <TabsTrigger value="plan" className="w-full">
                Plan
              </TabsTrigger>
              <TabsTrigger
                value="calculate"
                className="w-full"
                disabled={locations.length === 0 || drivers.length === 0}
                onClick={() => {
                  setTabValue("calculate");
                  void getRoutes();
                }}
              >
                Calculate
              </TabsTrigger>{" "}
            </TabsList>
            <TabsContent value="plan" asChild>
              <>
                <PageHeader />
                <div className="flex flex-col px-4">
                  <div className="flex items-center justify-between">
                    <h2 className="scroll-m-20 text-xl font-semibold tracking-tight">
                      Drivers{" "}
                      <span className="rounded-lg border border-slate-300 px-2">
                        {drivers?.length ?? 0}
                      </span>
                    </h2>
                  </div>

                  {databaseDrivers && databaseDrivers?.length > 0 ? (
                    <p>No drivers have been added to this route.</p>
                  ) : (
                    <p>
                      You don&apos;t have any drivers saved to this depot yet.
                    </p>
                  )}

                  <Sheet>
                    <SheetTrigger asChild>
                      <Button className="my-4 gap-2">
                        <PlusIcon /> Add drivers to depot
                      </Button>
                    </SheetTrigger>
                    <SheetContent className="w-full bg-orange-500 sm:bg-green-500 md:bg-yellow-500 lg:max-w-lg lg:bg-purple-500 xl:max-w-xl xl:bg-indigo-500 2xl:max-w-2xl 2xl:bg-red-500">
                      <SheetHeader>
                        <SheetTitle>Manage depot drivers</SheetTitle>
                        <SheetDescription>
                          Add depot drivers to your depot to start planning
                        </SheetDescription>
                      </SheetHeader>
                      <NewDriverSheet />
                      <TabOptions type="driver" />
                      <div className="flex flex-col gap-4">
                        <Command>
                          <CommandInput
                            placeholder="Search drivers..."
                            className="border-0"
                          />
                          <CommandList>
                            <CommandEmpty>No results found.</CommandEmpty>
                            {databaseDrivers &&
                              databaseDrivers?.length > 0 &&
                              databaseDrivers?.map((driver, idx) => (
                                <CommandItem key={idx}>
                                  {driver.name}
                                </CommandItem>
                              ))}
                          </CommandList>
                        </Command>

                        {databaseDrivers &&
                          databaseDrivers?.length > 0 &&
                          databaseDrivers?.map((driver, idx) => (
                            <div
                              className={cn(
                                "flex w-full items-center justify-between p-3 text-left font-medium shadow odd:bg-slate-300/50 even:bg-slate-100 hover:ring-1 hover:ring-slate-800/30"
                                // activeDriver?.id === driver.id &&
                                // "odd:bg-indigo-300/50 even:bg-indigo-100"
                              )}
                              key={idx}
                            >
                              <span className="group w-10/12 cursor-pointer">
                                <h2
                                  className={cn(
                                    "text-sm font-bold capitalize "
                                    // activeDriver?.id === driver.id
                                    //   ? "text-indigo-800 "
                                    //   : "text-slate-800 "
                                  )}
                                >
                                  {driver.name}
                                </h2>
                              </span>
                              <ChevronRight className="text-slate-800 group-hover:bg-opacity-30" />
                            </div>
                          ))}
                      </div>
                      <div className="relative">
                        <Sheet>
                          <SheetTrigger asChild>
                            <Button className="my-4 gap-2">
                              <PlusIcon /> Add drivers to depot
                            </Button>
                          </SheetTrigger>
                          <SheetContent className="z-50 w-full bg-orange-500 transition-opacity data-[state=closed]:fade-out-0 data-[state=open]:fade-in-100 lg:right-[32rem] xl:right-[36rem] 2xl:right-[42rem]">
                            <SheetHeader>
                              <SheetTitle>Manage depot drivers</SheetTitle>
                              <SheetDescription>
                                Add depot drivers to your depot to start
                                planning
                              </SheetDescription>
                            </SheetHeader>
                            <NewDriverSheet />
                            <div className="flex flex-col gap-4">
                              <Command>
                                <CommandInput
                                  placeholder="Search drivers..."
                                  className="border-0"
                                />
                                <CommandList>
                                  <CommandEmpty>No results found.</CommandEmpty>
                                  {databaseDrivers &&
                                    databaseDrivers?.length > 0 &&
                                    databaseDrivers?.map((driver, idx) => (
                                      <CommandItem key={idx}>
                                        {driver.name}
                                      </CommandItem>
                                    ))}
                                </CommandList>
                              </Command>

                              {databaseDrivers &&
                                databaseDrivers?.length > 0 &&
                                databaseDrivers?.map((driver, idx) => (
                                  <div
                                    className={cn(
                                      "flex w-full items-center justify-between p-3 text-left font-medium shadow odd:bg-slate-300/50 even:bg-slate-100 hover:ring-1 hover:ring-slate-800/30"
                                      // activeDriver?.id === driver.id &&
                                      // "odd:bg-indigo-300/50 even:bg-indigo-100"
                                    )}
                                    key={idx}
                                  >
                                    <span className="group w-10/12 cursor-pointer">
                                      <h2
                                        className={cn(
                                          "text-sm font-bold capitalize "
                                          // activeDriver?.id === driver.id
                                          //   ? "text-indigo-800 "
                                          //   : "text-slate-800 "
                                        )}
                                      >
                                        {driver.name}
                                      </h2>
                                    </span>
                                    <ChevronRight className="text-slate-800 group-hover:bg-opacity-30" />
                                  </div>
                                ))}
                            </div>
                          </SheetContent>
                        </Sheet>
                      </div>
                    </SheetContent>
                  </Sheet>
                </div>
                <DriversDynamicTab />
                {/* {databaseDrivers ? (
                  <DriversDynamicTab />
                ) : (
                  <div className="flex flex-col px-4">
                    <div className="flex items-center justify-between">
                      <h2 className="scroll-m-20 text-xl font-semibold tracking-tight">
                        Drivers{" "}
                        <span className="rounded-lg border border-slate-300 px-2">
                          {drivers?.length ?? 0}
                        </span>
                      </h2>
                    </div>

                    <p>You don&apos;t have any drivers yet.</p>

                    <NewDriverSheet />
                  </div>
                )} */}

                <StopsDynamicTab />
                <div className=" flex h-16 items-center justify-end bg-white p-4">
                  <Button
                    onClick={() => {
                      setTabValue("calculate");
                      void getRoutes();
                    }}
                    className="gap-2"
                    disabled={locations.length === 0 || drivers.length === 0}
                  >
                    Calculate Routes <ArrowRight />
                  </Button>
                </div>
              </>
            </TabsContent>
            <TabsContent value="calculate" asChild>
              <>
                <CalculationsDynamicTab />
                <div className=" flex h-16 items-center justify-end bg-white p-4">
                  <Button
                    onClick={() => {
                      setTabValue("calculate");
                      void getRoutes();
                    }}
                    className="gap-2"
                    disabled={locations.length === 0 || drivers.length === 0}
                  >
                    Calculate Routes <ArrowRight />
                  </Button>
                </div>
              </>
            </TabsContent>
          </Tabs>
          <section className="z-0 flex aspect-square h-full w-full flex-col md:aspect-auto md:w-6/12 lg:w-7/12 2xl:w-9/12">
            <LazyRoutingMap />
          </section>
        </section>
      </RouteLayout>
    </>
  );
};

const PageHeader = () => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const { data: depot } = api.depots.getOwnedDepot.useQuery();
  return (
    <div className="flex flex-col space-y-2 px-4 md:justify-between">
      <h2 className="hidden text-xl font-bold tracking-tight md:flex">
        {depot?.name ?? "Owner"}&apos;s Depot
      </h2>
      <div className="flex  items-center space-x-2">
        <div className="flex w-full flex-col  md:w-auto">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                disabled
                className={cn(
                  "w-full pl-3 text-left font-normal md:w-[240px] ",
                  !selectedDate && "text-muted-foreground"
                )}
              >
                {selectedDate ? (
                  format(selectedDate, "PPP")
                ) : (
                  <span>Pick a date</span>
                )}
                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={(e) => {
                  setSelectedDate(e!);
                }}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>
    </div>
  );
};

export const getServerSideProps = () => {
  // try {
  //   await prisma.driver.deleteMany({
  //     where: {
  //       depotId: ctx.query.depot as string,
  //     },
  //   });
  // } catch (e) {
  //   console.log("no drivers ");
  // }

  return {
    props: {},
  };
};
export default RoutingPage;
