import axios from "axios";

import dynamic from "next/dynamic";
import Head from "next/head";

import Pusher from "pusher-js";
import { useState } from "react";

import { Button } from "~/components/ui/button";
import { Calendar } from "~/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { ScrollArea } from "~/components/ui/scroll-area";

import ToolLayout from "~/layouts/tool-layout";

const RoutingDashboardPage = () => {
  // const [activeUsers, setActiveUsers] = useState<PusherUserData[]>([]);
  // const [currentRoutes, setCurrentRoutes] = useState<RouteData[]>([]);
  // const [selected, setSelected] = useState<StepData | null>(null);
  const [date, setDate] = useState<Date | undefined>(new Date());
  // const [open, setOpen] = useState(false);

  // useEffect(() => {
  //   const pusher = new Pusher(env.NEXT_PUBLIC_PUSHER_APP_KEY, {
  //     cluster: "us2",
  //   });
  //   const channel = pusher.subscribe("map");

  //   channel.bind("update-locations", setActiveUsers);

  //   axios
  //     .get("/api/fetch-routes")
  //     .then(function (response) {
  //       setCurrentRoutes(response.data.data as RouteData[]);
  //     })
  //     .catch(function (error) {
  //       console.log(error);
  //     });

  //   return () => {
  //     pusher.unsubscribe("map");
  //   };
  // }, []);

  return (
    <>
      <Head>
        <title>Routing Dashboard | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />{" "}
      </Head>
      <ToolLayout>
        <section className="flex w-full flex-grow flex-col  justify-between pb-4 lg:w-5/12 xl:w-4/12 2xl:w-3/12">
          <div className="flex h-full flex-col">
            <h1 className="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0">
              Dashboard
            </h1>{" "}
            <ScrollArea className=" h-4/5 w-full rounded-md border p-4">
              <Calendar
                mode="single"
                selected={date}
                onSelect={setDate}
                className="mx-auto h-auto w-full rounded-md border shadow"
              />
            </ScrollArea>
          </div>

          <Button>Adjust Routes</Button>

          {/* {selected && (
            <StopDetails stop={selected} open={open} setOpen={setOpen} />
          )} */}
        </section>
        <section className="relative z-0 flex aspect-square w-full flex-grow flex-col  overflow-hidden pl-8 lg:aspect-auto lg:w-7/12 xl:w-9/12 2xl:w-9/12">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <DataCard />
            <DataCard />
            <DataCard />
            <DataCard />
          </div>
        </section>
      </ToolLayout>
    </>
  );
};

const DataCard = () => {
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="2"
          className="h-4 w-4 text-muted-foreground"
        >
          <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
        </svg>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">$45,231.89</div>
        <p className="text-xs text-muted-foreground">+20.1% from last month</p>
      </CardContent>
    </Card>
  );
};

export default RoutingDashboardPage;
