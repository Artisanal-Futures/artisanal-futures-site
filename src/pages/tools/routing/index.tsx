import { Tab } from "@headlessui/react";
import { format } from "date-fns";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useState } from "react";
import DriversTab from "~/components/tools/routing/drivers/drivers_tab";
import CalculationsTab from "~/components/tools/routing/solutions/calculations_tab";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";

import StopsTab, {
  StopsDynamicTab,
} from "~/components/tools/routing/stops/stops_tab";
import RouteLayout from "~/layouts/route-layout";

import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "~/components/ui/popover";

import { zodResolver } from "@hookform/resolvers/zod";
import { HamburgerMenuIcon } from "@radix-ui/react-icons";
import { CalendarIcon } from "lucide-react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import DriverCard from "~/components/tools/routing/drivers/driver_card";
import StopCard from "~/components/tools/routing/stops/stop_card";
import TabOptions, {
  ImportOptionsBtn,
} from "~/components/tools/routing/ui/tab_options";
import { Button } from "~/components/ui/button";
import { Calendar } from "~/components/ui/calendar";
import { Checkbox } from "~/components/ui/checkbox";
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "~/components/ui/command";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form";
import { Input } from "~/components/ui/input";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "~/components/ui/map-sheet";
import { ScrollArea } from "~/components/ui/scroll-area";
import { useDrivers } from "~/hooks/routing/use-drivers";
import { useStops } from "~/hooks/routing/use-stops";
import TestLayout from "~/layouts/test-layout";
import ToolLayout from "~/layouts/tool-layout";
import { classNames, cn } from "~/utils/styles";
const LazyRoutingMap = dynamic(
  () => import("~/components/tools/routing/map/routing-map"),
  {
    ssr: false,
    loading: () => <div>loading...</div>,
  }
);
/**
 * Page component that allows users to generate routes based on their input.
 */
const RoutingPage = () => {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const { locations, activeLocation } = useStops((state) => state);
  const { drivers, activeDriver, setSelectedDrivers } = useDrivers(
    (state) => state
  );

  const FormSchema = z.object({
    items: z.array(z.string()).refine((value) => value.some((item) => item), {
      message: "You have to select at least one item.",
    }),
  });
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {},
  });
  function onSubmit(data: z.infer<typeof FormSchema>) {
    toast({
      title: "You submitted the following values:",
      description: (
        <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4">
          <code className="text-white">{JSON.stringify(data, null, 2)}</code>
        </pre>
      ),
    });
  }
  return (
    <>
      <Head>
        <title>Routing Optimization | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />{" "}
      </Head>
      <RouteLayout>
        <section className="flex flex-1 flex-row border-2 ">
          {/* <PageHeader /> */}
          <div className="flex flex-col gap-4 lg:w-5/12 xl:w-3/12">
            <Sheet>
              <SheetTrigger>Add Drivers</SheetTrigger>
              <SheetContent side={"left"} className="flex flex-1 flex-col">
                <SheetHeader>
                  <SheetTitle>Manage depot drivers</SheetTitle>
                  <SheetDescription>
                    You can add and manage your drivers available in your depot
                    here.
                  </SheetDescription>
                </SheetHeader>
                <Command>
                  <div className="flex w-full items-center justify-between">
                    <CommandInput placeholder="Search for driver..." />

                    <ImportOptionsBtn type="driver" />
                  </div>

                  <CommandList className="max-h-full">
                    <CommandEmpty>No results found.</CommandEmpty>
                    <CommandGroup>
                      <ScrollArea>
                        {drivers?.length > 0 &&
                          drivers.map((listing, idx) => (
                            <CommandItem key={idx}>
                              <span className="sr-only">{listing?.name}</span>{" "}
                              <Checkbox id={`${listing.id}`} />
                              <DriverCard key={idx} driver={listing} />
                            </CommandItem>
                          ))}
                      </ScrollArea>{" "}
                    </CommandGroup>
                    <CommandSeparator />
                  </CommandList>
                </Command>
                <ScrollArea>
                  {locations?.length > 0 &&
                    locations.map((listing, idx) => (
                      <>
                        <StopCard key={idx} stop={listing} />
                        <StopCard key={idx} stop={listing} />
                      </>
                    ))}
                </ScrollArea>{" "}
                <Button>Add Driver</Button>
              </SheetContent>
              <SheetFooter></SheetFooter>
            </Sheet>{" "}
            <div className="flex flex-col">
              <h2>Drivers</h2>
              <p>Selected drivers for this current route</p>{" "}
            </div>
            <ScrollArea>
              {drivers?.length > 0 &&
                drivers.map((driver, idx) => (
                  <>
                    <DriverCard key={idx} driver={driver} />{" "}
                  </>
                ))}
            </ScrollArea>{" "}
            <StopsDynamicTab />
            <div className=" flex h-16 items-center justify-end bg-white p-4">
              <Button>Calculate Routes</Button>
            </div>
          </div>

          <section className="z-0 w-full lg:w-7/12 xl:w-9/12">
            <LazyRoutingMap />
          </section>
        </section>
      </RouteLayout>
    </>
  );
};

const PageHeader = () => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  return (
    <div className="flex flex-col space-y-2 md:flex-row md:items-center md:justify-between ">
      <h2 className="hidden text-3xl font-bold tracking-tight md:flex">
        Dashboard
      </h2>
      <div className="flex  items-center space-x-2">
        <div className="flex w-full flex-col  md:w-auto">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                disabled
                className={cn(
                  "w-full pl-3 text-left font-normal md:w-[240px] ",
                  !selectedDate && "text-muted-foreground"
                )}
              >
                {selectedDate ? (
                  format(selectedDate, "PPP")
                ) : (
                  <span>Pick a date</span>
                )}
                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={(e) => {
                  setSelectedDate(e!);
                }}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>
    </div>
  );
};

const MobileTabs = () => {
  return (
    <Sheet>
      <SheetTrigger>
        <Button className="absolute bottom-20 left-20 h-20 w-20 rounded-full">
          <HamburgerMenuIcon />
        </Button>
      </SheetTrigger>
      <SheetContent side={"bottom"} className="h-[400px] sm:h-2/5">
        <SheetHeader>
          <SheetTitle>Are you sure absolutely sure?</SheetTitle>
          <SheetDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </SheetDescription>
        </SheetHeader>
        <Tabs
          defaultValue="stops"
          className="z-0 flex h-96 flex-col bg-teal-500 sm:bg-pink-500 md:w-full md:bg-yellow-500 lg:w-5/12 lg:basis-auto lg:bg-indigo-500 xl:w-4/12 xl:bg-lime-500 2xl:w-3/12 2xl:bg-orange-500"
        >
          <>
            <TabsList className="mx-auto mb-5 flex w-full  space-x-1 border-b-4 border-b-indigo-500/20 pb-0 pt-3">
              <TabsTrigger value="stops">Stops</TabsTrigger>
              <TabsTrigger value="drivers">Drivers</TabsTrigger>
              <TabsTrigger value="calculate">Calculate</TabsTrigger>
            </TabsList>
            <div className="flex  flex-col overflow-y-hidden">
              <TabsContent
                value="stops"
                className="flex flex-col rounded-xl p-3 lg:h-full"
              >
                <StopsTab />
              </TabsContent>
              <TabsContent
                value="drivers"
                className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
              >
                <DriversTab />
              </TabsContent>
              <TabsContent
                value="calculate"
                className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
              >
                <CalculationsTab />
              </TabsContent>
            </div>
          </>
        </Tabs>
      </SheetContent>
    </Sheet>
  );
};

const Backup = () => {
  const [selectedIndex, setSelectedIndex] = useState(0);

  return (
    <>
      <Head>
        <title>Routing Optimization | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />{" "}
      </Head>
      <RouteLayout>
        <section className="flex h-full w-full flex-col ">
          <PageHeader />

          <div className=" flex h-full flex-col-reverse gap-4  overflow-y-auto  p-3 lg:flex-row lg:overflow-y-hidden">
            <Tabs
              defaultValue="stops"
              className=" z-0 flex h-full  basis-1/4 flex-col-reverse bg-teal-500 sm:bg-pink-500 md:w-full md:bg-yellow-500 lg:w-5/12 lg:basis-auto lg:flex-col lg:bg-indigo-500 xl:w-4/12 xl:bg-lime-500 2xl:w-3/12 2xl:bg-orange-500"
            >
              <>
                <TabsList className="mx-auto flex     h-36 w-full md:h-auto">
                  <TabsTrigger value="stops" className="h-36 flex-1 md:h-auto">
                    Stops
                  </TabsTrigger>
                  <TabsTrigger value="drivers" className="flex-1">
                    Drivers
                  </TabsTrigger>
                  <TabsTrigger value="calculate" className="flex-1">
                    Calculate
                  </TabsTrigger>
                </TabsList>
                <div className="flex  h-fit  flex-col overflow-y-hidden">
                  <TabsContent
                    value="stops"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <StopsTab />
                  </TabsContent>
                  <TabsContent
                    value="drivers"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <DriversTab />
                  </TabsContent>
                  <TabsContent
                    value="calculate"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <CalculationsTab />
                  </TabsContent>
                </div>
              </>
            </Tabs>

            <section className=" relative z-0 hidden aspect-square  w-full grow basis-auto flex-col lg:flex lg:aspect-auto lg:w-7/12 xl:w-9/12 2xl:w-9/12">
              <LazyRoutingMap />
            </section>
          </div>
        </section>

        {/* <section className="flex h-full w-full flex-col ">
          <PageHeader />

          <div className=" flex h-full flex-col gap-4  overflow-y-auto  p-3 lg:flex-row lg:overflow-y-hidden">
            <Tabs
              defaultValue="stops"
              className="z-0  hidden  h-full basis-1/4 flex-col bg-teal-500 sm:bg-pink-500 md:w-full md:bg-yellow-500 lg:flex lg:w-5/12 lg:basis-auto lg:bg-indigo-500 xl:w-4/12 xl:bg-lime-500 2xl:w-3/12 2xl:bg-orange-500"
            >
              <>
                <TabsList className="mx-auto mb-5 flex w-full  space-x-1 border-b-4 border-b-indigo-500/20 pb-0 pt-3">
                  <TabsTrigger value="stops">Stops</TabsTrigger>
                  <TabsTrigger value="drivers">Drivers</TabsTrigger>
                  <TabsTrigger value="calculate">Calculate</TabsTrigger>
                </TabsList>
                <div className="flex  h-fit  flex-col overflow-y-hidden">
                  <TabsContent
                    value="stops"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <StopsTab />
                  </TabsContent>
                  <TabsContent
                    value="drivers"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <DriversTab />
                  </TabsContent>
                  <TabsContent
                    value="calculate"
                    className="flex h-96 flex-col rounded-xl p-3 lg:h-full"
                  >
                    <CalculationsTab />
                  </TabsContent>
                </div>
              </>
            </Tabs>

            <div className="  z-0 hidden  h-full w-full grow basis-auto flex-col lg:flex lg:w-7/12 xl:w-9/12 2xl:w-9/12">
              <LazyRoutingMap />
            </div>
            <div className=" relative z-0 flex  aspect-auto  w-full grow basis-auto flex-col lg:w-7/12 xl:w-9/12 2xl:w-9/12">
              <LazyRoutingMap />
            </div>
            <MobileTabs />
          </div>
        </section> */}
      </RouteLayout>
    </>
  );
};
export default RoutingPage;
