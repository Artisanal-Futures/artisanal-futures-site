import Head from "next/head";

import Body from "~/components/body";

import { Popover, Transition } from "@headlessui/react";

import { ChevronDown } from "lucide-react";
import React, { Fragment, useEffect, useMemo, useRef, useState } from "react";
import AiSort from "~/components/products/ai-sort";
import ArtisanField from "~/components/products/artisan-field";
import AttributeField from "~/components/products/attribute-field";
import ProductCard from "~/components/products/product-card";
import SearchBar from "~/components/products/search-bar";
import useProducts from "~/hooks/useProducts";

const ProductsPage: React.FC = () => {
  const {
    products,
    attributes: principles,
    artisans,
    isLoading,
    isError,
    sortWithAI,
    isSorting,
    filterProducts,
    resetProducts,
    setFilteredProducts,
  } = useProducts();

  const [selectedPrinciples, setSelectedPrinciples] = useState<string[]>([]);
  const [selectedArtisans, setSelectedArtisans] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOption, setSortOption] = useState<string>("");
  const [applicableArtisans, setApplicableArtisans] = useState<string[]>([]);

  const [isAISortVisible, setIsAISortVisible] = useState<boolean>(false);

  const aiSortRef = useRef<HTMLInputElement>(null);

  const filteredPrinciples = useMemo(() => {
    return products
      ? products.reduce<string[]>((acc, product) => {
          const productPrinciples = product.principles
            .split(",")
            .map((attr) => attr.trim());
          return [...acc, ...productPrinciples];
        }, [])
      : [];
  }, [products]);

  useEffect(() => {
    filterProducts({
      principles: selectedPrinciples,
      the_artisan: selectedArtisans,
      query: searchTerm,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedPrinciples, selectedArtisans, searchTerm]);

  useEffect(() => {
    const filteredArtisans = products.map((product) => product.the_artisan);

    setApplicableArtisans([...new Set(filteredArtisans)]);
  }, [products]);

  // Sort products based on the selected sort option
  const sortProducts = (option: string) => {
    let sorted = [...(products || [])];

    setIsAISortVisible(false);
    if (option === "atoz") {
      sorted = sorted.sort((a, b) => a.name.localeCompare(b.name));
    } else if (option === "ztoa") {
      sorted = sorted.sort((a, b) => b.name.localeCompare(a.name));
    } else if (option === "none") {
      sorted = sorted.sort((a, b) => (a.craftID > b.craftID ? 1 : -1));
    } else if (option === "ai") {
      setIsAISortVisible(true);
    }

    setFilteredProducts(sorted);
  };

  // Handle principle selection
  const handlePrincipleSelect = (principle: string) => {
    const isSelected = selectedPrinciples.includes(principle);
    let updatedPrinciples = [...selectedPrinciples];

    if (isSelected) {
      updatedPrinciples = updatedPrinciples.filter((p) => p !== principle);
    } else {
      updatedPrinciples.push(principle);
    }

    setSelectedPrinciples(updatedPrinciples);
  };

  // Handle artisan selection
  const handleArtisanSelect = (artisan: string) => {
    const isSelected = selectedArtisans.includes(artisan);
    let updatedArtisans = [...selectedArtisans];

    if (isSelected) {
      updatedArtisans = updatedArtisans.filter((a) => a !== artisan);
    } else {
      updatedArtisans.push(artisan);
    }

    setSelectedArtisans(updatedArtisans);
  };

  // Handle search term input
  const handleSearchTermChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setSearchTerm(event.target.value);
  };

  // Handle sort option change
  const handleSortOptionChange = (
    event: React.ChangeEvent<HTMLSelectElement>
  ) => {
    const option = event.target.value;
    setSortOption(option);
    sortProducts(option);
  };

  const handleSortWithAI = async () => {
    if (
      aiSortRef.current?.value === undefined ||
      aiSortRef?.current?.value === ""
    )
      return;
    await sortWithAI(aiSortRef.current?.value).then((data) => {
      setFilteredProducts(data);
    });
  };

  // Reset all filters
  const resetFilters = () => {
    setSelectedPrinciples([]);
    setSelectedArtisans([]);
    setSearchTerm("");
    resetProducts();
    setSortOption("");
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error occurred while fetching products.</div>;
  }

  return (
    <>
      <Head>
        <title>Products | Artisanal Futures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body>
        {" "}
        <h1 className="text-5xl font-semibold">Products</h1>
        <p className="lead mb-3 mt-2 text-2xl text-slate-400">
          Search through all our artisans&apos; products and support small
          businesses
        </p>
        <div className="flex flex-col md:flex-row">
          <div className="w-full p-4 md:w-1/4">
            <Popover className="relative flex md:hidden">
              {({ open }) => (
                <>
                  <Popover.Button
                    className={`
                ${open ? "" : "text-opacity-90"}
                group inline-flex w-full items-center rounded-md bg-indigo-700 px-3 py-2 text-base font-medium text-white hover:text-opacity-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75`}
                  >
                    <span>Filters</span>
                    <ChevronDown
                      className={`${open ? "" : "text-opacity-70"}
                  ml-2 h-5 w-5 text-indigo-300 transition duration-150 ease-in-out group-hover:text-opacity-80`}
                      aria-hidden="true"
                    />
                  </Popover.Button>
                  <Transition
                    as={Fragment}
                    enter="transition ease-out duration-200"
                    enterFrom="opacity-0 translate-y-1"
                    enterTo="opacity-100 translate-y-0"
                    leave="transition ease-in duration-150"
                    leaveFrom="opacity-100 translate-y-0"
                    leaveTo="opacity-0 translate-y-1"
                  >
                    <Popover.Panel className="   absolute left-1/2 z-10 mt-3 w-screen max-w-md -translate-x-1/2 transform px-4 sm:px-0 lg:max-w-3xl">
                      <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
                        <div className="relative grid  bg-white p-7 lg:grid-cols-2">
                          {/* <h2 className="font-semibold text-lg text-slate-800">Filters</h2> */}
                          <SearchBar
                            handleOnSearch={handleSearchTermChange}
                            query={searchTerm}
                          />
                          <AttributeField
                            attributes={principles}
                            selectedAttributes={selectedPrinciples}
                            filteredAttributes={filteredPrinciples}
                            handleSelect={handlePrincipleSelect}
                          />

                          <ArtisanField
                            artisans={artisans}
                            selectedArtisans={selectedArtisans}
                            handleSelect={handleArtisanSelect}
                            applicableArtisans={applicableArtisans}
                          />
                        </div>
                        <div className="bg-gray-50 p-4">
                          <button
                            onClick={resetFilters}
                            className="w-full rounded-md bg-indigo-500 px-4 py-2 text-base font-semibold text-white hover:bg-indigo-700"
                          >
                            Reset Filters
                          </button>
                        </div>
                      </div>
                    </Popover.Panel>
                  </Transition>
                </>
              )}
            </Popover>

            <section className="hidden md:flex md:flex-col">
              <h2 className="text-lg font-semibold text-slate-800">Filters</h2>
              <SearchBar
                handleOnSearch={handleSearchTermChange}
                query={searchTerm}
              />
              <AttributeField
                attributes={principles}
                selectedAttributes={selectedPrinciples}
                filteredAttributes={filteredPrinciples}
                handleSelect={handlePrincipleSelect}
              />

              <ArtisanField
                artisans={artisans}
                selectedArtisans={selectedArtisans}
                handleSelect={handleArtisanSelect}
                applicableArtisans={applicableArtisans}
              />

              <button
                onClick={resetFilters}
                className="rounded-md bg-indigo-500 px-4 py-2 text-base font-semibold text-white hover:bg-indigo-700"
              >
                Reset Filters
              </button>
            </section>
          </div>
          <div className="w-full flex-grow p-4 md:w-3/4">
            <h2>Filtered Products {products?.length}</h2>
            <div>
              <label htmlFor="sortOption">Sort by:</label>
              <select
                id="sortOption"
                value={sortOption}
                onChange={handleSortOptionChange}
              >
                <option value="none">None</option>

                <option value="atoz">A to Z</option>
                <option value="ztoa">Z to A</option>
                <option value="ai">Keyword with AI</option>
              </select>

              {isAISortVisible && (
                <AiSort
                  fetching={isAISortVisible ? isSorting : false}
                  handleOnClick={() => void handleSortWithAI()}
                  ref={aiSortRef}
                />
              )}
            </div>
            <div className="flex flex-col md:flex-row md:flex-wrap">
              {products !== null ? (
                products.map((product) => (
                  <div
                    className="flex basis-full p-4 md:basis-1/2 lg:basis-1/3 "
                    key={product.name}
                  >
                    <ProductCard {...product} key={product.craftID} />
                  </div>
                ))
              ) : (
                <div>No products found.</div>
              )}
            </div>
          </div>
        </div>
      </Body>
    </>
  );
};

export default ProductsPage;
